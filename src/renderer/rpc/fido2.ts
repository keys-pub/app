// Code generated by protoc-gen-tsrpc DO NOT EDIT.
// InputID: fae89154d66f8f51539590381df365becb6039b2
import {ipcRenderer} from 'electron'
import {randomBytes} from 'crypto'

import {
  DevicesRequest,
  DevicesResponse,
  DeviceInfoRequest,
  DeviceInfoResponse,
  MakeCredentialRequest,
  MakeCredentialResponse,
  SetPINRequest,
  SetPINResponse,
  ResetRequest,
  ResetResponse,
  RetryCountRequest,
  RetryCountResponse,
  AssertionRequest,
  AssertionResponse,
  CredentialsInfoRequest,
  CredentialsInfoResponse,
  CredentialsRequest,
  CredentialsResponse,
  RelyingPartiesRequest,
  RelyingPartiesResponse,
  GenerateHMACSecretRequest,
  GenerateHMACSecretResponse,
  HMACSecretRequest,
  HMACSecretResponse
} from './fido2.d'

const replyID = (): string => {
  return randomBytes(20).toString('hex')
}

export type ErrHandler = (err: {message: string; code: number}) => void
var errHandler: ErrHandler = (err: {message: string; code: number}) => {}
export const setErrHandler = (eh: ErrHandler) => {
  errHandler = eh
}

export const devices = (req: DevicesRequest) => {
	return new Promise<DevicesResponse>((resolve, reject) => {
		const reply = 'Auth.Devices-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Auth.Devices):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('RPC (Auth.Devices) done')
			}
			resolve(arg.resp)
		})
		console.log('RPC (Auth.Devices)...')
		ipcRenderer.send('rpc', {service: 'Auth', method: 'Devices', args: req, reply: reply})
	})
}

export const deviceInfo = (req: DeviceInfoRequest) => {
	return new Promise<DeviceInfoResponse>((resolve, reject) => {
		const reply = 'Auth.DeviceInfo-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Auth.DeviceInfo):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('RPC (Auth.DeviceInfo) done')
			}
			resolve(arg.resp)
		})
		console.log('RPC (Auth.DeviceInfo)...')
		ipcRenderer.send('rpc', {service: 'Auth', method: 'DeviceInfo', args: req, reply: reply})
	})
}

export const makeCredential = (req: MakeCredentialRequest) => {
	return new Promise<MakeCredentialResponse>((resolve, reject) => {
		const reply = 'Auth.MakeCredential-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Auth.MakeCredential):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('RPC (Auth.MakeCredential) done')
			}
			resolve(arg.resp)
		})
		console.log('RPC (Auth.MakeCredential)...')
		ipcRenderer.send('rpc', {service: 'Auth', method: 'MakeCredential', args: req, reply: reply})
	})
}

export const setPIN = (req: SetPINRequest) => {
	return new Promise<SetPINResponse>((resolve, reject) => {
		const reply = 'Auth.SetPIN-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Auth.SetPIN):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('RPC (Auth.SetPIN) done')
			}
			resolve(arg.resp)
		})
		console.log('RPC (Auth.SetPIN)...')
		ipcRenderer.send('rpc', {service: 'Auth', method: 'SetPIN', args: req, reply: reply})
	})
}

export const reset = (req: ResetRequest) => {
	return new Promise<ResetResponse>((resolve, reject) => {
		const reply = 'Auth.Reset-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Auth.Reset):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('RPC (Auth.Reset) done')
			}
			resolve(arg.resp)
		})
		console.log('RPC (Auth.Reset)...')
		ipcRenderer.send('rpc', {service: 'Auth', method: 'Reset', args: req, reply: reply})
	})
}

export const retryCount = (req: RetryCountRequest) => {
	return new Promise<RetryCountResponse>((resolve, reject) => {
		const reply = 'Auth.RetryCount-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Auth.RetryCount):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('RPC (Auth.RetryCount) done')
			}
			resolve(arg.resp)
		})
		console.log('RPC (Auth.RetryCount)...')
		ipcRenderer.send('rpc', {service: 'Auth', method: 'RetryCount', args: req, reply: reply})
	})
}

export const assertion = (req: AssertionRequest) => {
	return new Promise<AssertionResponse>((resolve, reject) => {
		const reply = 'Auth.Assertion-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Auth.Assertion):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('RPC (Auth.Assertion) done')
			}
			resolve(arg.resp)
		})
		console.log('RPC (Auth.Assertion)...')
		ipcRenderer.send('rpc', {service: 'Auth', method: 'Assertion', args: req, reply: reply})
	})
}

export const credentialsInfo = (req: CredentialsInfoRequest) => {
	return new Promise<CredentialsInfoResponse>((resolve, reject) => {
		const reply = 'Auth.CredentialsInfo-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Auth.CredentialsInfo):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('RPC (Auth.CredentialsInfo) done')
			}
			resolve(arg.resp)
		})
		console.log('RPC (Auth.CredentialsInfo)...')
		ipcRenderer.send('rpc', {service: 'Auth', method: 'CredentialsInfo', args: req, reply: reply})
	})
}

export const credentials = (req: CredentialsRequest) => {
	return new Promise<CredentialsResponse>((resolve, reject) => {
		const reply = 'Auth.Credentials-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Auth.Credentials):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('RPC (Auth.Credentials) done')
			}
			resolve(arg.resp)
		})
		console.log('RPC (Auth.Credentials)...')
		ipcRenderer.send('rpc', {service: 'Auth', method: 'Credentials', args: req, reply: reply})
	})
}

export const relyingParties = (req: RelyingPartiesRequest) => {
	return new Promise<RelyingPartiesResponse>((resolve, reject) => {
		const reply = 'Auth.RelyingParties-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Auth.RelyingParties):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('RPC (Auth.RelyingParties) done')
			}
			resolve(arg.resp)
		})
		console.log('RPC (Auth.RelyingParties)...')
		ipcRenderer.send('rpc', {service: 'Auth', method: 'RelyingParties', args: req, reply: reply})
	})
}

export const generateHMACSecret = (req: GenerateHMACSecretRequest) => {
	return new Promise<GenerateHMACSecretResponse>((resolve, reject) => {
		const reply = 'Auth.GenerateHMACSecret-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Auth.GenerateHMACSecret):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('RPC (Auth.GenerateHMACSecret) done')
			}
			resolve(arg.resp)
		})
		console.log('RPC (Auth.GenerateHMACSecret)...')
		ipcRenderer.send('rpc', {service: 'Auth', method: 'GenerateHMACSecret', args: req, reply: reply})
	})
}

export const hmacSecret = (req: HMACSecretRequest) => {
	return new Promise<HMACSecretResponse>((resolve, reject) => {
		const reply = 'Auth.HMACSecret-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Auth.HMACSecret):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('RPC (Auth.HMACSecret) done')
			}
			resolve(arg.resp)
		})
		console.log('RPC (Auth.HMACSecret)...')
		ipcRenderer.send('rpc', {service: 'Auth', method: 'HMACSecret', args: req, reply: reply})
	})
}

