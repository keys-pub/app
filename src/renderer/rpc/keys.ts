// Code generated by protoc-gen-tsrpc DO NOT EDIT.
// InputID: 86279fe82bd9aa2220f109c1c71f0b757da879a2
import {ipcRenderer} from 'electron'
import {randomBytes} from 'crypto'

import {
  KeyGenerateRequest,
  KeyGenerateResponse,
  KeysRequest,
  KeysResponse,
  KeyRequest,
  KeyResponse,
  KeyImportRequest,
  KeyImportResponse,
  KeyExportRequest,
  KeyExportResponse,
  KeyRemoveRequest,
  KeyRemoveResponse,
  SignRequest,
  SignResponse,
  SignFileInput,
  SignFileOutput,
  SignInput,
  SignOutput,
  VerifyRequest,
  VerifyResponse,
  VerifyFileInput,
  VerifyFileOutput,
  VerifyInput,
  VerifyOutput,
  VerifyDetachedRequest,
  VerifyDetachedResponse,
  VerifyDetachedFileInput,
  VerifyDetachedInput,
  EncryptRequest,
  EncryptResponse,
  EncryptInput,
  EncryptOutput,
  EncryptFileInput,
  EncryptFileOutput,
  DecryptRequest,
  DecryptResponse,
  DecryptFileInput,
  DecryptFileOutput,
  DecryptInput,
  DecryptOutput,
  SigchainRequest,
  SigchainResponse,
  StatementRequest,
  StatementResponse,
  StatementCreateRequest,
  StatementCreateResponse,
  StatementRevokeRequest,
  StatementRevokeResponse,
  UserRequest,
  UserResponse,
  UserSearchRequest,
  UserSearchResponse,
  UserServiceRequest,
  UserServiceResponse,
  UserSignRequest,
  UserSignResponse,
  UserAddRequest,
  UserAddResponse,
  SearchRequest,
  SearchResponse,
  SecretRequest,
  SecretResponse,
  SecretSaveRequest,
  SecretSaveResponse,
  SecretRemoveRequest,
  SecretRemoveResponse,
  SecretsRequest,
  SecretsResponse,
  ItemRequest,
  ItemResponse,
  ItemsRequest,
  ItemsResponse,
  PullRequest,
  PullResponse,
  PushRequest,
  PushResponse,
  ConfigRequest,
  ConfigResponse,
  ConfigSetRequest,
  ConfigSetResponse,
  WormholeInput,
  WormholeOutput,
  AuthSetupRequest,
  AuthSetupResponse,
  AuthUnlockRequest,
  AuthUnlockResponse,
  AuthLockRequest,
  AuthLockResponse,
  RuntimeStatusRequest,
  RuntimeStatusResponse,
  RandRequest,
  RandResponse,
  RandPasswordRequest,
  RandPasswordResponse,
  CollectionsRequest,
  CollectionsResponse,
  DocumentsRequest,
  DocumentsResponse,
  DocumentDeleteRequest,
  DocumentDeleteResponse,
  AdminSignURLRequest,
  AdminSignURLResponse,
  MessagePrepareRequest,
  MessagePrepareResponse,
  MessageCreateRequest,
  MessageCreateResponse,
  MessagesRequest,
  MessagesResponse,
  WatchRequest,
  WatchEvent
} from './keys.d'

export interface RPCError {
    code?: number;
    message?: string;
    details?: string;
}

const replyID = (): string => {
  return randomBytes(20).toString('hex')
}

export type ErrHandler = (err: RPCError) => void
var errHandler: ErrHandler = (err: RPCError) => {}
export const setErrHandler = (eh: ErrHandler) => {
  errHandler = eh
}

export const keyGenerate = (
  req: KeyGenerateRequest,
  cb: (err: RPCError, resp: KeyGenerateResponse) => void
) => {
  const reply = 'Keys.KeyGenerate-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.KeyGenerate):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.KeyGenerate) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.KeyGenerate)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'KeyGenerate', args: req, reply: reply})
}

export const keys = (
  req: KeysRequest,
  cb: (err: RPCError, resp: KeysResponse) => void
) => {
  const reply = 'Keys.Keys-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.Keys):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.Keys) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.Keys)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'Keys', args: req, reply: reply})
}

export const key = (
  req: KeyRequest,
  cb: (err: RPCError, resp: KeyResponse) => void
) => {
  const reply = 'Keys.Key-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.Key):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.Key) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.Key)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'Key', args: req, reply: reply})
}

export const keyImport = (
  req: KeyImportRequest,
  cb: (err: RPCError, resp: KeyImportResponse) => void
) => {
  const reply = 'Keys.KeyImport-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.KeyImport):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.KeyImport) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.KeyImport)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'KeyImport', args: req, reply: reply})
}

export const keyExport = (
  req: KeyExportRequest,
  cb: (err: RPCError, resp: KeyExportResponse) => void
) => {
  const reply = 'Keys.KeyExport-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.KeyExport):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.KeyExport) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.KeyExport)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'KeyExport', args: req, reply: reply})
}

export const keyRemove = (
  req: KeyRemoveRequest,
  cb: (err: RPCError, resp: KeyRemoveResponse) => void
) => {
  const reply = 'Keys.KeyRemove-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.KeyRemove):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.KeyRemove) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.KeyRemove)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'KeyRemove', args: req, reply: reply})
}

export const sign = (
  req: SignRequest,
  cb: (err: RPCError, resp: SignResponse) => void
) => {
  const reply = 'Keys.Sign-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.Sign):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.Sign) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.Sign)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'Sign', args: req, reply: reply})
}

export const signFile = (
  f: (err: RPCError, resp: SignFileOutput, done: boolean) => void
): ((req: SignFileInput, end: boolean) => void) => {
  const reply = 'Keys.SignFile-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.SignFile):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.SignFile) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.SignFile)...')
  return (req: SignFileInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'SignFile', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const signStream = (
  f: (err: RPCError, resp: SignOutput, done: boolean) => void
): ((req: SignInput, end: boolean) => void) => {
  const reply = 'Keys.SignStream-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.SignStream):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.SignStream) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.SignStream)...')
  return (req: SignInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'SignStream', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const verify = (
  req: VerifyRequest,
  cb: (err: RPCError, resp: VerifyResponse) => void
) => {
  const reply = 'Keys.Verify-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.Verify):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.Verify) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.Verify)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'Verify', args: req, reply: reply})
}

export const verifyFile = (
  f: (err: RPCError, resp: VerifyFileOutput, done: boolean) => void
): ((req: VerifyFileInput, end: boolean) => void) => {
  const reply = 'Keys.VerifyFile-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.VerifyFile):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.VerifyFile) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.VerifyFile)...')
  return (req: VerifyFileInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'VerifyFile', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const verifyStream = (
  f: (err: RPCError, resp: VerifyOutput, done: boolean) => void
): ((req: VerifyInput, end: boolean) => void) => {
  const reply = 'Keys.VerifyStream-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.VerifyStream):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.VerifyStream) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.VerifyStream)...')
  return (req: VerifyInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'VerifyStream', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const verifyArmoredStream = (
  f: (err: RPCError, resp: VerifyOutput, done: boolean) => void
): ((req: VerifyInput, end: boolean) => void) => {
  const reply = 'Keys.VerifyArmoredStream-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.VerifyArmoredStream):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.VerifyArmoredStream) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.VerifyArmoredStream)...')
  return (req: VerifyInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'VerifyArmoredStream', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const verifyDetached = (
  req: VerifyDetachedRequest,
  cb: (err: RPCError, resp: VerifyDetachedResponse) => void
) => {
  const reply = 'Keys.VerifyDetached-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.VerifyDetached):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.VerifyDetached) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.VerifyDetached)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'VerifyDetached', args: req, reply: reply})
}

export const verifyDetachedFile = (
  req: VerifyDetachedFileInput,
  cb: (err: RPCError, resp: VerifyDetachedResponse) => void
) => {
  const reply = 'Keys.VerifyDetachedFile-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.VerifyDetachedFile):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.VerifyDetachedFile) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.VerifyDetachedFile)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'VerifyDetachedFile', args: req, reply: reply})
}

export const verifyDetachedStream = (
  req: VerifyDetachedInput,
  cb: (err: RPCError, resp: VerifyDetachedResponse) => void
) => {
  const reply = 'Keys.VerifyDetachedStream-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.VerifyDetachedStream):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.VerifyDetachedStream) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.VerifyDetachedStream)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'VerifyDetachedStream', args: req, reply: reply})
}

export const encrypt = (
  req: EncryptRequest,
  cb: (err: RPCError, resp: EncryptResponse) => void
) => {
  const reply = 'Keys.Encrypt-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.Encrypt):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.Encrypt) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.Encrypt)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'Encrypt', args: req, reply: reply})
}

export const encryptStream = (
  f: (err: RPCError, resp: EncryptOutput, done: boolean) => void
): ((req: EncryptInput, end: boolean) => void) => {
  const reply = 'Keys.EncryptStream-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.EncryptStream):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.EncryptStream) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.EncryptStream)...')
  return (req: EncryptInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'EncryptStream', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const encryptFile = (
  f: (err: RPCError, resp: EncryptFileOutput, done: boolean) => void
): ((req: EncryptFileInput, end: boolean) => void) => {
  const reply = 'Keys.EncryptFile-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.EncryptFile):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.EncryptFile) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.EncryptFile)...')
  return (req: EncryptFileInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'EncryptFile', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const decrypt = (
  req: DecryptRequest,
  cb: (err: RPCError, resp: DecryptResponse) => void
) => {
  const reply = 'Keys.Decrypt-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.Decrypt):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.Decrypt) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.Decrypt)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'Decrypt', args: req, reply: reply})
}

export const decryptFile = (
  f: (err: RPCError, resp: DecryptFileOutput, done: boolean) => void
): ((req: DecryptFileInput, end: boolean) => void) => {
  const reply = 'Keys.DecryptFile-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.DecryptFile):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.DecryptFile) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.DecryptFile)...')
  return (req: DecryptFileInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'DecryptFile', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const decryptStream = (
  f: (err: RPCError, resp: DecryptOutput, done: boolean) => void
): ((req: DecryptInput, end: boolean) => void) => {
  const reply = 'Keys.DecryptStream-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.DecryptStream):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.DecryptStream) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.DecryptStream)...')
  return (req: DecryptInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'DecryptStream', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const decryptArmoredStream = (
  f: (err: RPCError, resp: DecryptOutput, done: boolean) => void
): ((req: DecryptInput, end: boolean) => void) => {
  const reply = 'Keys.DecryptArmoredStream-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.DecryptArmoredStream):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.DecryptArmoredStream) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.DecryptArmoredStream)...')
  return (req: DecryptInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'DecryptArmoredStream', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const signcryptOpenStream = (
  f: (err: RPCError, resp: DecryptOutput, done: boolean) => void
): ((req: DecryptInput, end: boolean) => void) => {
  const reply = 'Keys.SigncryptOpenStream-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.SigncryptOpenStream):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.SigncryptOpenStream) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.SigncryptOpenStream)...')
  return (req: DecryptInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'SigncryptOpenStream', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const signcryptOpenArmoredStream = (
  f: (err: RPCError, resp: DecryptOutput, done: boolean) => void
): ((req: DecryptInput, end: boolean) => void) => {
  const reply = 'Keys.SigncryptOpenArmoredStream-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.SigncryptOpenArmoredStream):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.SigncryptOpenArmoredStream) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.SigncryptOpenArmoredStream)...')
  return (req: DecryptInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'SigncryptOpenArmoredStream', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const sigchain = (
  req: SigchainRequest,
  cb: (err: RPCError, resp: SigchainResponse) => void
) => {
  const reply = 'Keys.Sigchain-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.Sigchain):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.Sigchain) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.Sigchain)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'Sigchain', args: req, reply: reply})
}

export const statement = (
  req: StatementRequest,
  cb: (err: RPCError, resp: StatementResponse) => void
) => {
  const reply = 'Keys.Statement-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.Statement):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.Statement) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.Statement)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'Statement', args: req, reply: reply})
}

export const statementCreate = (
  req: StatementCreateRequest,
  cb: (err: RPCError, resp: StatementCreateResponse) => void
) => {
  const reply = 'Keys.StatementCreate-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.StatementCreate):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.StatementCreate) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.StatementCreate)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'StatementCreate', args: req, reply: reply})
}

export const statementRevoke = (
  req: StatementRevokeRequest,
  cb: (err: RPCError, resp: StatementRevokeResponse) => void
) => {
  const reply = 'Keys.StatementRevoke-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.StatementRevoke):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.StatementRevoke) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.StatementRevoke)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'StatementRevoke', args: req, reply: reply})
}

export const user = (
  req: UserRequest,
  cb: (err: RPCError, resp: UserResponse) => void
) => {
  const reply = 'Keys.User-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.User):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.User) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.User)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'User', args: req, reply: reply})
}

export const userSearch = (
  req: UserSearchRequest,
  cb: (err: RPCError, resp: UserSearchResponse) => void
) => {
  const reply = 'Keys.UserSearch-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.UserSearch):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.UserSearch) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.UserSearch)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'UserSearch', args: req, reply: reply})
}

export const userService = (
  req: UserServiceRequest,
  cb: (err: RPCError, resp: UserServiceResponse) => void
) => {
  const reply = 'Keys.UserService-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.UserService):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.UserService) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.UserService)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'UserService', args: req, reply: reply})
}

export const userSign = (
  req: UserSignRequest,
  cb: (err: RPCError, resp: UserSignResponse) => void
) => {
  const reply = 'Keys.UserSign-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.UserSign):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.UserSign) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.UserSign)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'UserSign', args: req, reply: reply})
}

export const userAdd = (
  req: UserAddRequest,
  cb: (err: RPCError, resp: UserAddResponse) => void
) => {
  const reply = 'Keys.UserAdd-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.UserAdd):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.UserAdd) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.UserAdd)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'UserAdd', args: req, reply: reply})
}

export const search = (
  req: SearchRequest,
  cb: (err: RPCError, resp: SearchResponse) => void
) => {
  const reply = 'Keys.Search-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.Search):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.Search) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.Search)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'Search', args: req, reply: reply})
}

export const secret = (
  req: SecretRequest,
  cb: (err: RPCError, resp: SecretResponse) => void
) => {
  const reply = 'Keys.Secret-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.Secret):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.Secret) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.Secret)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'Secret', args: req, reply: reply})
}

export const secretSave = (
  req: SecretSaveRequest,
  cb: (err: RPCError, resp: SecretSaveResponse) => void
) => {
  const reply = 'Keys.SecretSave-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.SecretSave):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.SecretSave) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.SecretSave)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'SecretSave', args: req, reply: reply})
}

export const secretRemove = (
  req: SecretRemoveRequest,
  cb: (err: RPCError, resp: SecretRemoveResponse) => void
) => {
  const reply = 'Keys.SecretRemove-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.SecretRemove):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.SecretRemove) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.SecretRemove)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'SecretRemove', args: req, reply: reply})
}

export const secrets = (
  req: SecretsRequest,
  cb: (err: RPCError, resp: SecretsResponse) => void
) => {
  const reply = 'Keys.Secrets-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.Secrets):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.Secrets) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.Secrets)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'Secrets', args: req, reply: reply})
}

export const item = (
  req: ItemRequest,
  cb: (err: RPCError, resp: ItemResponse) => void
) => {
  const reply = 'Keys.Item-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.Item):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.Item) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.Item)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'Item', args: req, reply: reply})
}

export const items = (
  req: ItemsRequest,
  cb: (err: RPCError, resp: ItemsResponse) => void
) => {
  const reply = 'Keys.Items-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.Items):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.Items) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.Items)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'Items', args: req, reply: reply})
}

export const pull = (
  req: PullRequest,
  cb: (err: RPCError, resp: PullResponse) => void
) => {
  const reply = 'Keys.Pull-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.Pull):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.Pull) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.Pull)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'Pull', args: req, reply: reply})
}

export const push = (
  req: PushRequest,
  cb: (err: RPCError, resp: PushResponse) => void
) => {
  const reply = 'Keys.Push-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.Push):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.Push) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.Push)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'Push', args: req, reply: reply})
}

export const config = (
  req: ConfigRequest,
  cb: (err: RPCError, resp: ConfigResponse) => void
) => {
  const reply = 'Keys.Config-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.Config):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.Config) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.Config)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'Config', args: req, reply: reply})
}

export const configSet = (
  req: ConfigSetRequest,
  cb: (err: RPCError, resp: ConfigSetResponse) => void
) => {
  const reply = 'Keys.ConfigSet-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.ConfigSet):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.ConfigSet) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.ConfigSet)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'ConfigSet', args: req, reply: reply})
}

export const wormhole = (
  f: (err: RPCError, resp: WormholeOutput, done: boolean) => void
): ((req: WormholeInput, end: boolean) => void) => {
  const reply = 'Keys.Wormhole-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.Wormhole):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.Wormhole) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.Wormhole)...')
  return (req: WormholeInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'Wormhole', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const authSetup = (
  req: AuthSetupRequest,
  cb: (err: RPCError, resp: AuthSetupResponse) => void
) => {
  const reply = 'Keys.AuthSetup-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.AuthSetup):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.AuthSetup) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.AuthSetup)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'AuthSetup', args: req, reply: reply})
}

export const authUnlock = (
  req: AuthUnlockRequest,
  cb: (err: RPCError, resp: AuthUnlockResponse) => void
) => {
  const reply = 'Keys.AuthUnlock-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.AuthUnlock):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.AuthUnlock) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.AuthUnlock)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'AuthUnlock', args: req, reply: reply})
}

export const authLock = (
  req: AuthLockRequest,
  cb: (err: RPCError, resp: AuthLockResponse) => void
) => {
  const reply = 'Keys.AuthLock-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.AuthLock):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.AuthLock) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.AuthLock)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'AuthLock', args: req, reply: reply})
}

export const runtimeStatus = (
  req: RuntimeStatusRequest,
  cb: (err: RPCError, resp: RuntimeStatusResponse) => void
) => {
  const reply = 'Keys.RuntimeStatus-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.RuntimeStatus):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.RuntimeStatus) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.RuntimeStatus)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'RuntimeStatus', args: req, reply: reply})
}

export const rand = (
  req: RandRequest,
  cb: (err: RPCError, resp: RandResponse) => void
) => {
  const reply = 'Keys.Rand-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.Rand):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.Rand) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.Rand)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'Rand', args: req, reply: reply})
}

export const randPassword = (
  req: RandPasswordRequest,
  cb: (err: RPCError, resp: RandPasswordResponse) => void
) => {
  const reply = 'Keys.RandPassword-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.RandPassword):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.RandPassword) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.RandPassword)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'RandPassword', args: req, reply: reply})
}

export const collections = (
  req: CollectionsRequest,
  cb: (err: RPCError, resp: CollectionsResponse) => void
) => {
  const reply = 'Keys.Collections-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.Collections):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.Collections) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.Collections)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'Collections', args: req, reply: reply})
}

export const documents = (
  req: DocumentsRequest,
  cb: (err: RPCError, resp: DocumentsResponse) => void
) => {
  const reply = 'Keys.Documents-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.Documents):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.Documents) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.Documents)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'Documents', args: req, reply: reply})
}

export const documentDelete = (
  req: DocumentDeleteRequest,
  cb: (err: RPCError, resp: DocumentDeleteResponse) => void
) => {
  const reply = 'Keys.DocumentDelete-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.DocumentDelete):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.DocumentDelete) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.DocumentDelete)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'DocumentDelete', args: req, reply: reply})
}

export const adminSignURL = (
  req: AdminSignURLRequest,
  cb: (err: RPCError, resp: AdminSignURLResponse) => void
) => {
  const reply = 'Keys.AdminSignURL-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.AdminSignURL):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.AdminSignURL) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.AdminSignURL)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'AdminSignURL', args: req, reply: reply})
}

export const messagePrepare = (
  req: MessagePrepareRequest,
  cb: (err: RPCError, resp: MessagePrepareResponse) => void
) => {
  const reply = 'Keys.MessagePrepare-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.MessagePrepare):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.MessagePrepare) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.MessagePrepare)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'MessagePrepare', args: req, reply: reply})
}

export const messageCreate = (
  req: MessageCreateRequest,
  cb: (err: RPCError, resp: MessageCreateResponse) => void
) => {
  const reply = 'Keys.MessageCreate-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.MessageCreate):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.MessageCreate) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.MessageCreate)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'MessageCreate', args: req, reply: reply})
}

export const messages = (
  req: MessagesRequest,
  cb: (err: RPCError, resp: MessagesResponse) => void
) => {
  const reply = 'Keys.Messages-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.Messages):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.Messages) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.Messages)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'Messages', args: req, reply: reply})
}

export const watch = (
  req: WatchRequest,
  cb: (err: RPCError, resp: WatchEvent) => void
) => {
  const reply = 'Keys.Watch-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.Watch):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.Watch) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.Watch)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'Watch', args: req, reply: reply})
}

