// Code generated by protoc-gen-tsrpc DO NOT EDIT.
// InputID: 90a7c9e42c620e61efa1517893b257bdada7f02f
import {ipcRenderer} from 'electron'
import {randomBytes} from 'crypto'

import {
  KeyGenerateRequest,
  KeyGenerateResponse,
  KeysRequest,
  KeysResponse,
  KeyRequest,
  KeyResponse,
  KeyImportRequest,
  KeyImportResponse,
  KeyExportRequest,
  KeyExportResponse,
  KeyRemoveRequest,
  KeyRemoveResponse,
  SignRequest,
  SignResponse,
  SignFileInput,
  SignFileOutput,
  SignInput,
  SignOutput,
  VerifyRequest,
  VerifyResponse,
  VerifyFileInput,
  VerifyFileOutput,
  VerifyInput,
  VerifyOutput,
  VerifyDetachedRequest,
  VerifyDetachedResponse,
  VerifyDetachedFileInput,
  VerifyDetachedInput,
  EncryptRequest,
  EncryptResponse,
  EncryptInput,
  EncryptOutput,
  EncryptFileInput,
  EncryptFileOutput,
  DecryptRequest,
  DecryptResponse,
  DecryptInput,
  DecryptOutput,
  DecryptFileInput,
  DecryptFileOutput,
  SigchainRequest,
  SigchainResponse,
  StatementRequest,
  StatementResponse,
  StatementCreateRequest,
  StatementCreateResponse,
  StatementRevokeRequest,
  StatementRevokeResponse,
  UserRequest,
  UserResponse,
  UserSearchRequest,
  UserSearchResponse,
  UserServiceRequest,
  UserServiceResponse,
  UserSignRequest,
  UserSignResponse,
  UserAddRequest,
  UserAddResponse,
  SearchRequest,
  SearchResponse,
  SecretRequest,
  SecretResponse,
  SecretSaveRequest,
  SecretSaveResponse,
  SecretRemoveRequest,
  SecretRemoveResponse,
  SecretsRequest,
  SecretsResponse,
  PullRequest,
  PullResponse,
  PushRequest,
  PushResponse,
  WormholeInput,
  WormholeOutput,
  AuthSetupRequest,
  AuthSetupResponse,
  AuthVaultRequest,
  AuthVaultResponse,
  AuthUnlockRequest,
  AuthUnlockResponse,
  AuthLockRequest,
  AuthLockResponse,
  AuthResetRequest,
  AuthResetResponse,
  AuthRecoverRequest,
  AuthRecoverResponse,
  RuntimeStatusRequest,
  RuntimeStatusResponse,
  RandRequest,
  RandResponse,
  RandPasswordRequest,
  RandPasswordResponse,
  AuthProvisionRequest,
  AuthProvisionResponse,
  AuthDeprovisionRequest,
  AuthDeprovisionResponse,
  AuthProvisionsRequest,
  AuthProvisionsResponse,
  PasswordChangeRequest,
  PasswordChangeResponse,
  VaultAuthRequest,
  VaultAuthResponse,
  VaultSyncRequest,
  VaultSyncResponse,
  VaultUnsyncRequest,
  VaultUnsyncResponse,
  VaultStatusRequest,
  VaultStatusResponse,
  VaultUpdateRequest,
  VaultUpdateResponse,
  CollectionsRequest,
  CollectionsResponse,
  DocumentsRequest,
  DocumentsResponse,
  DocumentDeleteRequest,
  DocumentDeleteResponse,
  ConfigGetRequest,
  ConfigGetResponse,
  ConfigSetRequest,
  ConfigSetResponse,
  AdminSignURLRequest,
  AdminSignURLResponse,
  AdminCheckRequest,
  AdminCheckResponse,
  MessagePrepareRequest,
  MessagePrepareResponse,
  MessageCreateRequest,
  MessageCreateResponse,
  MessagesRequest,
  MessagesResponse
} from './keys.d'

const replyID = (): string => {
  return randomBytes(20).toString('hex')
}

export type ErrHandler = (err: {message: string; code: number}) => void
var errHandler: ErrHandler = (err: {message: string; code: number}) => {}
export const setErrHandler = (eh: ErrHandler) => {
  errHandler = eh
}

export const keyGenerate = (req: KeyGenerateRequest) => {
	return new Promise<KeyGenerateResponse>((resolve, reject) => {
		const reply = 'Keys.KeyGenerate-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.KeyGenerate):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.KeyGenerate')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'KeyGenerate', args: req, reply: reply})
	})
}

export const keys = (req: KeysRequest) => {
	return new Promise<KeysResponse>((resolve, reject) => {
		const reply = 'Keys.Keys-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.Keys):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.Keys')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'Keys', args: req, reply: reply})
	})
}

export const key = (req: KeyRequest) => {
	return new Promise<KeyResponse>((resolve, reject) => {
		const reply = 'Keys.Key-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.Key):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.Key')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'Key', args: req, reply: reply})
	})
}

export const keyImport = (req: KeyImportRequest) => {
	return new Promise<KeyImportResponse>((resolve, reject) => {
		const reply = 'Keys.KeyImport-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.KeyImport):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.KeyImport')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'KeyImport', args: req, reply: reply})
	})
}

export const keyExport = (req: KeyExportRequest) => {
	return new Promise<KeyExportResponse>((resolve, reject) => {
		const reply = 'Keys.KeyExport-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.KeyExport):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.KeyExport')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'KeyExport', args: req, reply: reply})
	})
}

export const keyRemove = (req: KeyRemoveRequest) => {
	return new Promise<KeyRemoveResponse>((resolve, reject) => {
		const reply = 'Keys.KeyRemove-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.KeyRemove):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.KeyRemove')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'KeyRemove', args: req, reply: reply})
	})
}

export const sign = (req: SignRequest) => {
	return new Promise<SignResponse>((resolve, reject) => {
		const reply = 'Keys.Sign-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.Sign):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.Sign')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'Sign', args: req, reply: reply})
	})
}

export type SignFileEvent = {err?: {message: string; name: string; code?: number}, res?: SignFileOutput, done: boolean}

export const signFile = (
  f: (res: SignFileEvent) => void
): ((req?: SignFileInput, end?: boolean) => void) => {
  const reply = 'Keys.SignFile-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.SignFile):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('Keys.SignFile')
	}
	const res: SignFileEvent = {		
		res: arg.resp,
		err: arg.err,
		done: !!arg.done, 
	}
	f(res)
  })
  return (req?: SignFileInput, end?: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'SignFile', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export type SignStreamEvent = {err?: {message: string; name: string; code?: number}, res?: SignOutput, done: boolean}

export const signStream = (
  f: (res: SignStreamEvent) => void
): ((req?: SignInput, end?: boolean) => void) => {
  const reply = 'Keys.SignStream-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.SignStream):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('Keys.SignStream')
	}
	const res: SignStreamEvent = {		
		res: arg.resp,
		err: arg.err,
		done: !!arg.done, 
	}
	f(res)
  })
  return (req?: SignInput, end?: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'SignStream', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const verify = (req: VerifyRequest) => {
	return new Promise<VerifyResponse>((resolve, reject) => {
		const reply = 'Keys.Verify-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.Verify):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.Verify')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'Verify', args: req, reply: reply})
	})
}

export type VerifyFileEvent = {err?: {message: string; name: string; code?: number}, res?: VerifyFileOutput, done: boolean}

export const verifyFile = (
  f: (res: VerifyFileEvent) => void
): ((req?: VerifyFileInput, end?: boolean) => void) => {
  const reply = 'Keys.VerifyFile-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.VerifyFile):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('Keys.VerifyFile')
	}
	const res: VerifyFileEvent = {		
		res: arg.resp,
		err: arg.err,
		done: !!arg.done, 
	}
	f(res)
  })
  return (req?: VerifyFileInput, end?: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'VerifyFile', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export type VerifyStreamEvent = {err?: {message: string; name: string; code?: number}, res?: VerifyOutput, done: boolean}

export const verifyStream = (
  f: (res: VerifyStreamEvent) => void
): ((req?: VerifyInput, end?: boolean) => void) => {
  const reply = 'Keys.VerifyStream-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.VerifyStream):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('Keys.VerifyStream')
	}
	const res: VerifyStreamEvent = {		
		res: arg.resp,
		err: arg.err,
		done: !!arg.done, 
	}
	f(res)
  })
  return (req?: VerifyInput, end?: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'VerifyStream', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const verifyDetached = (req: VerifyDetachedRequest) => {
	return new Promise<VerifyDetachedResponse>((resolve, reject) => {
		const reply = 'Keys.VerifyDetached-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.VerifyDetached):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.VerifyDetached')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'VerifyDetached', args: req, reply: reply})
	})
}

export const verifyDetachedFile = (req: VerifyDetachedFileInput) => {
	return new Promise<VerifyDetachedResponse>((resolve, reject) => {
		const reply = 'Keys.VerifyDetachedFile-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.VerifyDetachedFile):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.VerifyDetachedFile')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'VerifyDetachedFile', args: req, reply: reply})
	})
}

export const verifyDetachedStream = (req: VerifyDetachedInput) => {
	return new Promise<VerifyDetachedResponse>((resolve, reject) => {
		const reply = 'Keys.VerifyDetachedStream-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.VerifyDetachedStream):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.VerifyDetachedStream')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'VerifyDetachedStream', args: req, reply: reply})
	})
}

export const encrypt = (req: EncryptRequest) => {
	return new Promise<EncryptResponse>((resolve, reject) => {
		const reply = 'Keys.Encrypt-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.Encrypt):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.Encrypt')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'Encrypt', args: req, reply: reply})
	})
}

export type EncryptStreamEvent = {err?: {message: string; name: string; code?: number}, res?: EncryptOutput, done: boolean}

export const encryptStream = (
  f: (res: EncryptStreamEvent) => void
): ((req?: EncryptInput, end?: boolean) => void) => {
  const reply = 'Keys.EncryptStream-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.EncryptStream):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('Keys.EncryptStream')
	}
	const res: EncryptStreamEvent = {		
		res: arg.resp,
		err: arg.err,
		done: !!arg.done, 
	}
	f(res)
  })
  return (req?: EncryptInput, end?: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'EncryptStream', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export type EncryptFileEvent = {err?: {message: string; name: string; code?: number}, res?: EncryptFileOutput, done: boolean}

export const encryptFile = (
  f: (res: EncryptFileEvent) => void
): ((req?: EncryptFileInput, end?: boolean) => void) => {
  const reply = 'Keys.EncryptFile-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.EncryptFile):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('Keys.EncryptFile')
	}
	const res: EncryptFileEvent = {		
		res: arg.resp,
		err: arg.err,
		done: !!arg.done, 
	}
	f(res)
  })
  return (req?: EncryptFileInput, end?: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'EncryptFile', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const decrypt = (req: DecryptRequest) => {
	return new Promise<DecryptResponse>((resolve, reject) => {
		const reply = 'Keys.Decrypt-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.Decrypt):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.Decrypt')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'Decrypt', args: req, reply: reply})
	})
}

export type DecryptStreamEvent = {err?: {message: string; name: string; code?: number}, res?: DecryptOutput, done: boolean}

export const decryptStream = (
  f: (res: DecryptStreamEvent) => void
): ((req?: DecryptInput, end?: boolean) => void) => {
  const reply = 'Keys.DecryptStream-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.DecryptStream):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('Keys.DecryptStream')
	}
	const res: DecryptStreamEvent = {		
		res: arg.resp,
		err: arg.err,
		done: !!arg.done, 
	}
	f(res)
  })
  return (req?: DecryptInput, end?: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'DecryptStream', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export type DecryptFileEvent = {err?: {message: string; name: string; code?: number}, res?: DecryptFileOutput, done: boolean}

export const decryptFile = (
  f: (res: DecryptFileEvent) => void
): ((req?: DecryptFileInput, end?: boolean) => void) => {
  const reply = 'Keys.DecryptFile-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.DecryptFile):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('Keys.DecryptFile')
	}
	const res: DecryptFileEvent = {		
		res: arg.resp,
		err: arg.err,
		done: !!arg.done, 
	}
	f(res)
  })
  return (req?: DecryptFileInput, end?: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'DecryptFile', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const sigchain = (req: SigchainRequest) => {
	return new Promise<SigchainResponse>((resolve, reject) => {
		const reply = 'Keys.Sigchain-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.Sigchain):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.Sigchain')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'Sigchain', args: req, reply: reply})
	})
}

export const statement = (req: StatementRequest) => {
	return new Promise<StatementResponse>((resolve, reject) => {
		const reply = 'Keys.Statement-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.Statement):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.Statement')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'Statement', args: req, reply: reply})
	})
}

export const statementCreate = (req: StatementCreateRequest) => {
	return new Promise<StatementCreateResponse>((resolve, reject) => {
		const reply = 'Keys.StatementCreate-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.StatementCreate):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.StatementCreate')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'StatementCreate', args: req, reply: reply})
	})
}

export const statementRevoke = (req: StatementRevokeRequest) => {
	return new Promise<StatementRevokeResponse>((resolve, reject) => {
		const reply = 'Keys.StatementRevoke-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.StatementRevoke):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.StatementRevoke')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'StatementRevoke', args: req, reply: reply})
	})
}

export const user = (req: UserRequest) => {
	return new Promise<UserResponse>((resolve, reject) => {
		const reply = 'Keys.User-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.User):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.User')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'User', args: req, reply: reply})
	})
}

export const userSearch = (req: UserSearchRequest) => {
	return new Promise<UserSearchResponse>((resolve, reject) => {
		const reply = 'Keys.UserSearch-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.UserSearch):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.UserSearch')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'UserSearch', args: req, reply: reply})
	})
}

export const userService = (req: UserServiceRequest) => {
	return new Promise<UserServiceResponse>((resolve, reject) => {
		const reply = 'Keys.UserService-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.UserService):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.UserService')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'UserService', args: req, reply: reply})
	})
}

export const userSign = (req: UserSignRequest) => {
	return new Promise<UserSignResponse>((resolve, reject) => {
		const reply = 'Keys.UserSign-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.UserSign):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.UserSign')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'UserSign', args: req, reply: reply})
	})
}

export const userAdd = (req: UserAddRequest) => {
	return new Promise<UserAddResponse>((resolve, reject) => {
		const reply = 'Keys.UserAdd-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.UserAdd):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.UserAdd')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'UserAdd', args: req, reply: reply})
	})
}

export const search = (req: SearchRequest) => {
	return new Promise<SearchResponse>((resolve, reject) => {
		const reply = 'Keys.Search-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.Search):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.Search')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'Search', args: req, reply: reply})
	})
}

export const secret = (req: SecretRequest) => {
	return new Promise<SecretResponse>((resolve, reject) => {
		const reply = 'Keys.Secret-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.Secret):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.Secret')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'Secret', args: req, reply: reply})
	})
}

export const secretSave = (req: SecretSaveRequest) => {
	return new Promise<SecretSaveResponse>((resolve, reject) => {
		const reply = 'Keys.SecretSave-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.SecretSave):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.SecretSave')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'SecretSave', args: req, reply: reply})
	})
}

export const secretRemove = (req: SecretRemoveRequest) => {
	return new Promise<SecretRemoveResponse>((resolve, reject) => {
		const reply = 'Keys.SecretRemove-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.SecretRemove):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.SecretRemove')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'SecretRemove', args: req, reply: reply})
	})
}

export const secrets = (req: SecretsRequest) => {
	return new Promise<SecretsResponse>((resolve, reject) => {
		const reply = 'Keys.Secrets-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.Secrets):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.Secrets')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'Secrets', args: req, reply: reply})
	})
}

export const pull = (req: PullRequest) => {
	return new Promise<PullResponse>((resolve, reject) => {
		const reply = 'Keys.Pull-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.Pull):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.Pull')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'Pull', args: req, reply: reply})
	})
}

export const push = (req: PushRequest) => {
	return new Promise<PushResponse>((resolve, reject) => {
		const reply = 'Keys.Push-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.Push):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.Push')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'Push', args: req, reply: reply})
	})
}

export type WormholeEvent = {err?: {message: string; name: string; code?: number}, res?: WormholeOutput, done: boolean}

export const wormhole = (
  f: (res: WormholeEvent) => void
): ((req?: WormholeInput, end?: boolean) => void) => {
  const reply = 'Keys.Wormhole-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.Wormhole):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('Keys.Wormhole')
	}
	const res: WormholeEvent = {		
		res: arg.resp,
		err: arg.err,
		done: !!arg.done, 
	}
	f(res)
  })
  return (req?: WormholeInput, end?: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'Wormhole', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const authSetup = (req: AuthSetupRequest) => {
	return new Promise<AuthSetupResponse>((resolve, reject) => {
		const reply = 'Keys.AuthSetup-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.AuthSetup):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.AuthSetup')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'AuthSetup', args: req, reply: reply})
	})
}

export const authVault = (req: AuthVaultRequest) => {
	return new Promise<AuthVaultResponse>((resolve, reject) => {
		const reply = 'Keys.AuthVault-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.AuthVault):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.AuthVault')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'AuthVault', args: req, reply: reply})
	})
}

export const authUnlock = (req: AuthUnlockRequest) => {
	return new Promise<AuthUnlockResponse>((resolve, reject) => {
		const reply = 'Keys.AuthUnlock-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.AuthUnlock):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.AuthUnlock')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'AuthUnlock', args: req, reply: reply})
	})
}

export const authLock = (req: AuthLockRequest) => {
	return new Promise<AuthLockResponse>((resolve, reject) => {
		const reply = 'Keys.AuthLock-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.AuthLock):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.AuthLock')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'AuthLock', args: req, reply: reply})
	})
}

export const authReset = (req: AuthResetRequest) => {
	return new Promise<AuthResetResponse>((resolve, reject) => {
		const reply = 'Keys.AuthReset-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.AuthReset):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.AuthReset')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'AuthReset', args: req, reply: reply})
	})
}

export const authRecover = (req: AuthRecoverRequest) => {
	return new Promise<AuthRecoverResponse>((resolve, reject) => {
		const reply = 'Keys.AuthRecover-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.AuthRecover):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.AuthRecover')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'AuthRecover', args: req, reply: reply})
	})
}

export const runtimeStatus = (req: RuntimeStatusRequest) => {
	return new Promise<RuntimeStatusResponse>((resolve, reject) => {
		const reply = 'Keys.RuntimeStatus-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.RuntimeStatus):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.RuntimeStatus')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'RuntimeStatus', args: req, reply: reply})
	})
}

export const rand = (req: RandRequest) => {
	return new Promise<RandResponse>((resolve, reject) => {
		const reply = 'Keys.Rand-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.Rand):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.Rand')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'Rand', args: req, reply: reply})
	})
}

export const randPassword = (req: RandPasswordRequest) => {
	return new Promise<RandPasswordResponse>((resolve, reject) => {
		const reply = 'Keys.RandPassword-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.RandPassword):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.RandPassword')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'RandPassword', args: req, reply: reply})
	})
}

export const authProvision = (req: AuthProvisionRequest) => {
	return new Promise<AuthProvisionResponse>((resolve, reject) => {
		const reply = 'Keys.AuthProvision-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.AuthProvision):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.AuthProvision')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'AuthProvision', args: req, reply: reply})
	})
}

export const authDeprovision = (req: AuthDeprovisionRequest) => {
	return new Promise<AuthDeprovisionResponse>((resolve, reject) => {
		const reply = 'Keys.AuthDeprovision-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.AuthDeprovision):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.AuthDeprovision')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'AuthDeprovision', args: req, reply: reply})
	})
}

export const authProvisions = (req: AuthProvisionsRequest) => {
	return new Promise<AuthProvisionsResponse>((resolve, reject) => {
		const reply = 'Keys.AuthProvisions-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.AuthProvisions):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.AuthProvisions')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'AuthProvisions', args: req, reply: reply})
	})
}

export const passwordChange = (req: PasswordChangeRequest) => {
	return new Promise<PasswordChangeResponse>((resolve, reject) => {
		const reply = 'Keys.PasswordChange-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.PasswordChange):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.PasswordChange')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'PasswordChange', args: req, reply: reply})
	})
}

export const vaultAuth = (req: VaultAuthRequest) => {
	return new Promise<VaultAuthResponse>((resolve, reject) => {
		const reply = 'Keys.VaultAuth-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.VaultAuth):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.VaultAuth')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'VaultAuth', args: req, reply: reply})
	})
}

export const vaultSync = (req: VaultSyncRequest) => {
	return new Promise<VaultSyncResponse>((resolve, reject) => {
		const reply = 'Keys.VaultSync-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.VaultSync):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.VaultSync')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'VaultSync', args: req, reply: reply})
	})
}

export const vaultUnsync = (req: VaultUnsyncRequest) => {
	return new Promise<VaultUnsyncResponse>((resolve, reject) => {
		const reply = 'Keys.VaultUnsync-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.VaultUnsync):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.VaultUnsync')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'VaultUnsync', args: req, reply: reply})
	})
}

export const vaultStatus = (req: VaultStatusRequest) => {
	return new Promise<VaultStatusResponse>((resolve, reject) => {
		const reply = 'Keys.VaultStatus-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.VaultStatus):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.VaultStatus')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'VaultStatus', args: req, reply: reply})
	})
}

export const vaultUpdate = (req: VaultUpdateRequest) => {
	return new Promise<VaultUpdateResponse>((resolve, reject) => {
		const reply = 'Keys.VaultUpdate-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.VaultUpdate):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.VaultUpdate')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'VaultUpdate', args: req, reply: reply})
	})
}

export const collections = (req: CollectionsRequest) => {
	return new Promise<CollectionsResponse>((resolve, reject) => {
		const reply = 'Keys.Collections-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.Collections):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.Collections')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'Collections', args: req, reply: reply})
	})
}

export const documents = (req: DocumentsRequest) => {
	return new Promise<DocumentsResponse>((resolve, reject) => {
		const reply = 'Keys.Documents-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.Documents):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.Documents')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'Documents', args: req, reply: reply})
	})
}

export const documentDelete = (req: DocumentDeleteRequest) => {
	return new Promise<DocumentDeleteResponse>((resolve, reject) => {
		const reply = 'Keys.DocumentDelete-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.DocumentDelete):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.DocumentDelete')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'DocumentDelete', args: req, reply: reply})
	})
}

export const configGet = (req: ConfigGetRequest) => {
	return new Promise<ConfigGetResponse>((resolve, reject) => {
		const reply = 'Keys.ConfigGet-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.ConfigGet):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.ConfigGet')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'ConfigGet', args: req, reply: reply})
	})
}

export const configSet = (req: ConfigSetRequest) => {
	return new Promise<ConfigSetResponse>((resolve, reject) => {
		const reply = 'Keys.ConfigSet-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.ConfigSet):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.ConfigSet')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'ConfigSet', args: req, reply: reply})
	})
}

export const adminSignURL = (req: AdminSignURLRequest) => {
	return new Promise<AdminSignURLResponse>((resolve, reject) => {
		const reply = 'Keys.AdminSignURL-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.AdminSignURL):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.AdminSignURL')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'AdminSignURL', args: req, reply: reply})
	})
}

export const adminCheck = (req: AdminCheckRequest) => {
	return new Promise<AdminCheckResponse>((resolve, reject) => {
		const reply = 'Keys.AdminCheck-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.AdminCheck):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.AdminCheck')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'AdminCheck', args: req, reply: reply})
	})
}

export const messagePrepare = (req: MessagePrepareRequest) => {
	return new Promise<MessagePrepareResponse>((resolve, reject) => {
		const reply = 'Keys.MessagePrepare-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.MessagePrepare):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.MessagePrepare')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'MessagePrepare', args: req, reply: reply})
	})
}

export const messageCreate = (req: MessageCreateRequest) => {
	return new Promise<MessageCreateResponse>((resolve, reject) => {
		const reply = 'Keys.MessageCreate-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.MessageCreate):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.MessageCreate')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'MessageCreate', args: req, reply: reply})
	})
}

export const messages = (req: MessagesRequest) => {
	return new Promise<MessagesResponse>((resolve, reject) => {
		const reply = 'Keys.Messages-' + replyID()
		ipcRenderer.on(reply, (event, arg) => {
			ipcRenderer.removeAllListeners(reply)
			if (arg.err) {
				console.error('RPC error (Keys.Messages):', arg.err)
				reject(arg.err)
				errHandler(arg.err)
			} else {
				console.log('Keys.Messages')
			}
			resolve(arg.resp)
		})
		ipcRenderer.send('rpc', {service: 'Keys', method: 'Messages', args: req, reply: reply})
	})
}

